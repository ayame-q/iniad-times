# Generated by Django 3.1.1 on 2020-09-24 01:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True, verbose_name='UUID')),
                ('student_id', models.CharField(blank=True, default='', max_length=10, null=True, verbose_name='学籍番号')),
                ('name', models.CharField(blank=True, default='', max_length=40, null=True, verbose_name='氏名')),
                ('display_name', models.CharField(default='No name', max_length=20, verbose_name='公開名')),
                ('entry_year', models.IntegerField(blank=True, null=True, verbose_name='入学年度')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='メールアドレス')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
                ('is_student', models.BooleanField(default=False, verbose_name='学生か')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='タイトル')),
                ('text', models.TextField(verbose_name='本文')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='更新日')),
                ('published_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='公開日')),
                ('is_posted', models.BooleanField(default=False, verbose_name='公開')),
                ('is_public', models.BooleanField(default=False, verbose_name='INIAD関係者以外の閲覧を許可する')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=24, verbose_name='カテゴリ名')),
                ('display_name', models.CharField(max_length=40, verbose_name='表示名')),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='upload_images')),
                ('title', models.CharField(blank=True, max_length=50, null=True, verbose_name='タイトル')),
                ('is_default', models.BooleanField(default=False, verbose_name='デフォルト表示画像')),
            ],
        ),
        migrations.CreateModel(
            name='Lecture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(choices=[('none', 'なし'), ('engineering', 'エンジニアリングコース'), ('design', 'デザインコース'), ('business', 'ビジネスコース'), ('civil-system', 'シビルシステムコース')], default='none', max_length=12, verbose_name='コース')),
                ('name', models.CharField(default='none', max_length=40, verbose_name='名前')),
                ('school_year', models.IntegerField(verbose_name='学年')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True, verbose_name='メールアドレス')),
                ('screen_name', models.CharField(blank=True, db_index=True, default='', max_length=20, null=True, verbose_name='スクリーンネーム')),
                ('name', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='ペンネーム')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='コメント')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=24, verbose_name='タグ名')),
            ],
        ),
        migrations.CreateModel(
            name='PreArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='タイトル')),
                ('text', models.TextField(verbose_name='本文')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='作成日')),
                ('is_editor', models.BooleanField(default=False, verbose_name='編集か')),
                ('article_editors', models.ManyToManyField(blank=True, related_name='edited_prearticle', to='times.Staff', verbose_name='編集者')),
                ('article_writers', models.ManyToManyField(blank=True, related_name='wrote_prearticle', to='times.Staff', verbose_name='執筆者')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prearticle', to='times.category', verbose_name='カテゴリー')),
                ('eyecatch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_prearticle', to='times.image', verbose_name='アイキャッチ画像')),
                ('lecture', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posts', to='times.lecture', verbose_name='授業')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='times.prearticle', verbose_name='親記事')),
                ('tags', models.ManyToManyField(blank=True, related_name='prearticle', to='times.Tag', verbose_name='タグ')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='times.staff', verbose_name='最終更新者')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='image',
            name='staff',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='times.staff', verbose_name='アップロードスタッフ'),
        ),
        migrations.CreateModel(
            name='BrowsingHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(default=django.utils.timezone.localtime, verbose_name='時刻')),
                ('article', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='browsed_histories', to='times.article', verbose_name='閲覧履歴')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='browsed_histories', to=settings.AUTH_USER_MODEL, verbose_name='ユーザー')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='article_editors',
            field=models.ManyToManyField(blank=True, related_name='edited_article', to='times.Staff', verbose_name='編集者'),
        ),
        migrations.AddField(
            model_name='article',
            name='article_writers',
            field=models.ManyToManyField(blank=True, related_name='wrote_article', to='times.Staff', verbose_name='執筆者'),
        ),
        migrations.AddField(
            model_name='article',
            name='category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='article', to='times.category', verbose_name='カテゴリー'),
        ),
        migrations.AddField(
            model_name='article',
            name='eyecatch',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='used_article', to='times.image', verbose_name='アイキャッチ画像'),
        ),
        migrations.AddField(
            model_name='article',
            name='last_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='times.staff', verbose_name='最終更新者'),
        ),
        migrations.AddField(
            model_name='article',
            name='lecture',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='times.lecture', verbose_name='授業'),
        ),
        migrations.AddField(
            model_name='article',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='articles', to='times.prearticle', verbose_name='元記事'),
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='article', to='times.Tag', verbose_name='タグ'),
        ),
        migrations.AddField(
            model_name='user',
            name='staff',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user', to='times.staff', verbose_name='スタッフID'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
